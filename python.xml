<?xml version="1.0" encoding="Windows-1252" ?>
        <!--
        @author Gregori Gerebtzoff
        @version 1.2
        -->
<NotepadPlus>
        <AutoComplete>
                <Environment ignoreCase="no" startFunc="(" stopFunc=")" paramSeparator="," additionalWordChar = "." />
                <KeyWord name="ArithmeticError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ArithmeticError">
                        </Overload>
                </KeyWord>
                <KeyWord name="AssertionError" func="yes">
                        <Overload retVal="" descr="Function of builtins.AssertionError">
                        </Overload>
                </KeyWord>
                <KeyWord name="AttributeError" func="yes">
                        <Overload retVal="" descr="Function of builtins.AttributeError">
                        </Overload>
                </KeyWord>
                <KeyWord name="BaseException" func="yes">
                        <Overload retVal="" descr="Function of builtins.BaseException">
                        </Overload>
                </KeyWord>
                <KeyWord name="BlockingIOError" func="yes">
                        <Overload retVal="" descr="Function of builtins.BlockingIOError">
                        </Overload>
                </KeyWord>
                <KeyWord name="BrokenPipeError" func="yes">
                        <Overload retVal="" descr="Function of builtins.BrokenPipeError">
                        </Overload>
                </KeyWord>
                <KeyWord name="BufferError" func="yes">
                        <Overload retVal="" descr="Function of builtins.BufferError">
                        </Overload>
                </KeyWord>
                <KeyWord name="BytesWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.BytesWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="ChildProcessError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ChildProcessError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ConnectionAbortedError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ConnectionAbortedError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ConnectionError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ConnectionError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ConnectionRefusedError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ConnectionRefusedError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ConnectionResetError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ConnectionResetError">
                        </Overload>
                </KeyWord>
                <KeyWord name="DeprecationWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.DeprecationWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="EOFError" func="yes">
                        <Overload retVal="" descr="Function of builtins.EOFError">
                        </Overload>
                </KeyWord>
                <KeyWord name="EnvironmentError" func="yes">
                        <Overload retVal="" descr="Function of builtins.EnvironmentError">
                        </Overload>
                </KeyWord>
                <KeyWord name="Exception" func="yes">
                        <Overload retVal="" descr="Function of builtins.Exception">
                        </Overload>
                </KeyWord>
                <KeyWord name="False" />
                <KeyWord name="FileExistsError" func="yes">
                        <Overload retVal="" descr="Function of builtins.FileExistsError">
                        </Overload>
                </KeyWord>
                <KeyWord name="FileNotFoundError" func="yes">
                        <Overload retVal="" descr="Function of builtins.FileNotFoundError">
                        </Overload>
                </KeyWord>
                <KeyWord name="FloatingPointError" func="yes">
                        <Overload retVal="" descr="Function of builtins.FloatingPointError">
                        </Overload>
                </KeyWord>
                <KeyWord name="FutureWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.FutureWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="GeneratorExit" func="yes">
                        <Overload retVal="" descr="Function of builtins.GeneratorExit">
                        </Overload>
                </KeyWord>
                <KeyWord name="IOError" func="yes">
                        <Overload retVal="" descr="Function of builtins.IOError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ImportError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ImportError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ImportWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.ImportWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="IndentationError" func="yes">
                        <Overload retVal="" descr="Function of builtins.IndentationError">
                        </Overload>
                </KeyWord>
                <KeyWord name="IndexError" func="yes">
                        <Overload retVal="" descr="Function of builtins.IndexError">
                        </Overload>
                </KeyWord>
                <KeyWord name="InterruptedError" func="yes">
                        <Overload retVal="" descr="Function of builtins.InterruptedError">
                        </Overload>
                </KeyWord>
                <KeyWord name="IsADirectoryError" func="yes">
                        <Overload retVal="" descr="Function of builtins.IsADirectoryError">
                        </Overload>
                </KeyWord>
                <KeyWord name="KeyError" func="yes">
                        <Overload retVal="" descr="Function of builtins.KeyError">
                        </Overload>
                </KeyWord>
                <KeyWord name="KeyboardInterrupt" func="yes">
                        <Overload retVal="" descr="Function of builtins.KeyboardInterrupt">
                        </Overload>
                </KeyWord>
                <KeyWord name="LookupError" func="yes">
                        <Overload retVal="" descr="Function of builtins.LookupError">
                        </Overload>
                </KeyWord>
                <KeyWord name="MemoryError" func="yes">
                        <Overload retVal="" descr="Function of builtins.MemoryError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ModuleNotFoundError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ModuleNotFoundError">
                        </Overload>
                </KeyWord>
                <KeyWord name="NameError" func="yes">
                        <Overload retVal="" descr="Function of builtins.NameError">
                        </Overload>
                </KeyWord>
                <KeyWord name="None" />
                <KeyWord name="NotADirectoryError" func="yes">
                        <Overload retVal="" descr="Function of builtins.NotADirectoryError">
                        </Overload>
                </KeyWord>
                <KeyWord name="NotImplementedError" func="yes">
                        <Overload retVal="" descr="Function of builtins.NotImplementedError">
                        </Overload>
                </KeyWord>
                <KeyWord name="OSError" func="yes">
                        <Overload retVal="" descr="Function of builtins.OSError">
                        </Overload>
                </KeyWord>
                <KeyWord name="OverflowError" func="yes">
                        <Overload retVal="" descr="Function of builtins.OverflowError">
                        </Overload>
                </KeyWord>
                <KeyWord name="PendingDeprecationWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.PendingDeprecationWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="PermissionError" func="yes">
                        <Overload retVal="" descr="Function of builtins.PermissionError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ProcessLookupError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ProcessLookupError">
                        </Overload>
                </KeyWord>
                <KeyWord name="RecursionError" func="yes">
                        <Overload retVal="" descr="Function of builtins.RecursionError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ReferenceError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ReferenceError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ResourceWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.ResourceWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="RuntimeError" func="yes">
                        <Overload retVal="" descr="Function of builtins.RuntimeError">
                        </Overload>
                </KeyWord>
                <KeyWord name="RuntimeWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.RuntimeWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="StopAsyncIteration" func="yes">
                        <Overload retVal="" descr="Function of builtins.StopAsyncIteration">
                        </Overload>
                </KeyWord>
                <KeyWord name="StopIteration" func="yes">
                        <Overload retVal="" descr="Function of builtins.StopIteration">
                        </Overload>
                </KeyWord>
                <KeyWord name="SyntaxError" func="yes">
                        <Overload retVal="" descr="Function of builtins.SyntaxError">
                        </Overload>
                </KeyWord>
                <KeyWord name="SyntaxWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.SyntaxWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="SystemError" func="yes">
                        <Overload retVal="" descr="Function of builtins.SystemError">
                        </Overload>
                </KeyWord>
                <KeyWord name="SystemExit" func="yes">
                        <Overload retVal="" descr="Function of builtins.SystemExit">
                        </Overload>
                </KeyWord>
                <KeyWord name="TabError" func="yes">
                        <Overload retVal="" descr="Function of builtins.TabError">
                        </Overload>
                </KeyWord>
                <KeyWord name="TimeoutError" func="yes">
                        <Overload retVal="" descr="Function of builtins.TimeoutError">
                        </Overload>
                </KeyWord>
                <KeyWord name="True" />
                <KeyWord name="TypeError" func="yes">
                        <Overload retVal="" descr="Function of builtins.TypeError">
                        </Overload>
                </KeyWord>
                <KeyWord name="UnboundLocalError" func="yes">
                        <Overload retVal="" descr="Function of builtins.UnboundLocalError">
                        </Overload>
                </KeyWord>
                <KeyWord name="UnicodeDecodeError" func="yes">
                        <Overload retVal="" descr="Function of builtins.UnicodeDecodeError">
                        </Overload>
                </KeyWord>
                <KeyWord name="UnicodeEncodeError" func="yes">
                        <Overload retVal="" descr="Function of builtins.UnicodeEncodeError">
                        </Overload>
                </KeyWord>
                <KeyWord name="UnicodeError" func="yes">
                        <Overload retVal="" descr="Function of builtins.UnicodeError">
                        </Overload>
                </KeyWord>
                <KeyWord name="UnicodeTranslateError" func="yes">
                        <Overload retVal="" descr="Function of builtins.UnicodeTranslateError">
                        </Overload>
                </KeyWord>
                <KeyWord name="UnicodeWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.UnicodeWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="UserWarning" func="yes">
                        <Overload retVal="" descr="Function of builtins.UserWarning">
                        </Overload>
                </KeyWord>
                <KeyWord name="ValueError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ValueError">
                        </Overload>
                </KeyWord>
                <KeyWord name="Warning" func="yes">
                        <Overload retVal="" descr="Function of builtins.Warning">
                        </Overload>
                </KeyWord>
                <KeyWord name="WindowsError" func="yes">
                        <Overload retVal="" descr="Function of builtins.WindowsError">
                        </Overload>
                </KeyWord>
                <KeyWord name="ZeroDivisionError" func="yes">
                        <Overload retVal="" descr="Function of builtins.ZeroDivisionError">
                        </Overload>
                </KeyWord>
                <KeyWord name="abs" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="add" func="yes">
                        <Overload retVal="" descr="Function of builtins.set">
                        </Overload>
                </KeyWord>
                <KeyWord name="all" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="and" />
                <KeyWord name="any" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="append" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="as" />
                <KeyWord name="as_integer_ratio" func="yes">
                        <Overload retVal="" descr="Function of builtins.float">
                        </Overload>
                </KeyWord>
                <KeyWord name="ascii" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="assert" />
                <KeyWord name="async" />
                <KeyWord name="await" />
                <KeyWord name="bin" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="bit_length" func="yes">
                        <Overload retVal="" descr="Function of builtins.bool">
                        </Overload>
                </KeyWord>
                <KeyWord name="bool" func="yes">
                        <Overload retVal="" descr="Function of builtins.bool">
                        </Overload>
                </KeyWord>
                <KeyWord name="break" />
                <KeyWord name="breakpoint" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins" func="yes">
                        <Overload retVal="" descr="Built-in functions, exceptions, and other objects.&#10;&#10;Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ArithmeticError" func="yes">
                        <Overload retVal="" descr="Base class for arithmetic errors.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ArithmeticError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ArithmeticError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.AssertionError" func="yes">
                        <Overload retVal="" descr="Assertion failed.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.AssertionError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.AssertionError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.AttributeError" func="yes">
                        <Overload retVal="" descr="Attribute not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.AttributeError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.AttributeError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BaseException" func="yes">
                        <Overload retVal="" descr="Common base class for all exceptions">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BaseException.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BaseException.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BlockingIOError" func="yes">
                        <Overload retVal="" descr="I/O operation would block.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BlockingIOError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BlockingIOError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BlockingIOError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BlockingIOError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BlockingIOError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BlockingIOError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BlockingIOError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BlockingIOError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BrokenPipeError" func="yes">
                        <Overload retVal="" descr="Broken pipe.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BrokenPipeError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BrokenPipeError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BrokenPipeError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BrokenPipeError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BrokenPipeError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BrokenPipeError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BrokenPipeError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BrokenPipeError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BufferError" func="yes">
                        <Overload retVal="" descr="Buffer error.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BufferError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BufferError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BytesWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings about bytes and buffer related problems, mostly&#10;related to conversion from str or comparing to str.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BytesWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.BytesWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ChildProcessError" func="yes">
                        <Overload retVal="" descr="Child process error.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ChildProcessError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ChildProcessError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ChildProcessError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ChildProcessError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ChildProcessError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ChildProcessError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ChildProcessError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ChildProcessError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionAbortedError" func="yes">
                        <Overload retVal="" descr="Connection aborted.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionAbortedError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionAbortedError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionAbortedError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionAbortedError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionAbortedError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionAbortedError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionAbortedError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionAbortedError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionError" func="yes">
                        <Overload retVal="" descr="Connection error.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionRefusedError" func="yes">
                        <Overload retVal="" descr="Connection refused.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionRefusedError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionRefusedError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionRefusedError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionRefusedError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionRefusedError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionRefusedError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionRefusedError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionRefusedError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionResetError" func="yes">
                        <Overload retVal="" descr="Connection reset.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionResetError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionResetError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionResetError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionResetError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionResetError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionResetError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionResetError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ConnectionResetError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.DeprecationWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings about deprecated features.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.DeprecationWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.DeprecationWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EOFError" func="yes">
                        <Overload retVal="" descr="Read beyond end of file.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EOFError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EOFError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.Ellipsis" func="yes">
                        <Overload retVal="" descr="(ellipsis)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EnvironmentError" func="yes">
                        <Overload retVal="" descr="Base class for I/O related errors.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EnvironmentError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EnvironmentError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EnvironmentError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EnvironmentError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EnvironmentError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EnvironmentError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EnvironmentError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.EnvironmentError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.Exception" func="yes">
                        <Overload retVal="" descr="Common base class for all non-exit exceptions.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.Exception.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.Exception.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileExistsError" func="yes">
                        <Overload retVal="" descr="File already exists.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileExistsError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileExistsError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileExistsError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileExistsError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileExistsError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileExistsError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileExistsError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileExistsError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileNotFoundError" func="yes">
                        <Overload retVal="" descr="File not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileNotFoundError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileNotFoundError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileNotFoundError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileNotFoundError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileNotFoundError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileNotFoundError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileNotFoundError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FileNotFoundError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FloatingPointError" func="yes">
                        <Overload retVal="" descr="Floating point operation failed.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FloatingPointError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FloatingPointError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FutureWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings about constructs that will change semantically&#10;in the future.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FutureWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.FutureWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.GeneratorExit" func="yes">
                        <Overload retVal="" descr="Request that a generator exit.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.GeneratorExit.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.GeneratorExit.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IOError" func="yes">
                        <Overload retVal="" descr="Base class for I/O related errors.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IOError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IOError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IOError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IOError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IOError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IOError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IOError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IOError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ImportError" func="yes">
                        <Overload retVal="" descr="Import can't find module, or can't find name in module.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ImportError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ImportError.msg" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ImportError.name" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ImportError.path" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ImportError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ImportWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings about probable mistakes in module imports">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ImportWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ImportWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndentationError" func="yes">
                        <Overload retVal="" descr="Improper indentation.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndentationError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndentationError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndentationError.lineno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndentationError.msg" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndentationError.offset" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndentationError.print_file_and_line" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndentationError.text" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndentationError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndexError" func="yes">
                        <Overload retVal="" descr="Sequence index out of range.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndexError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IndexError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.InterruptedError" func="yes">
                        <Overload retVal="" descr="Interrupted by signal.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.InterruptedError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.InterruptedError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.InterruptedError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.InterruptedError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.InterruptedError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.InterruptedError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.InterruptedError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.InterruptedError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IsADirectoryError" func="yes">
                        <Overload retVal="" descr="Operation doesn't work on directories.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IsADirectoryError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IsADirectoryError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IsADirectoryError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IsADirectoryError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IsADirectoryError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IsADirectoryError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IsADirectoryError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.IsADirectoryError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.KeyError" func="yes">
                        <Overload retVal="" descr="Mapping key not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.KeyError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.KeyError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.KeyboardInterrupt" func="yes">
                        <Overload retVal="" descr="Program interrupted by user.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.KeyboardInterrupt.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.KeyboardInterrupt.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.LookupError" func="yes">
                        <Overload retVal="" descr="Base class for lookup errors.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.LookupError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.LookupError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.MemoryError" func="yes">
                        <Overload retVal="" descr="Out of memory.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.MemoryError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.MemoryError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ModuleNotFoundError" func="yes">
                        <Overload retVal="" descr="Module not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ModuleNotFoundError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ModuleNotFoundError.msg" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ModuleNotFoundError.name" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ModuleNotFoundError.path" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ModuleNotFoundError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NameError" func="yes">
                        <Overload retVal="" descr="Name not found globally.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NameError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NameError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotADirectoryError" func="yes">
                        <Overload retVal="" descr="Operation only works on directories.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotADirectoryError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotADirectoryError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotADirectoryError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotADirectoryError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotADirectoryError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotADirectoryError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotADirectoryError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotADirectoryError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotImplemented" func="yes">
                        <Overload retVal="" descr="(NotImplementedType)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotImplementedError" func="yes">
                        <Overload retVal="" descr="Method or function hasn't been implemented yet.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotImplementedError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.NotImplementedError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OSError" func="yes">
                        <Overload retVal="" descr="Base class for I/O related errors.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OSError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OSError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OSError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OSError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OSError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OSError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OSError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OSError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OverflowError" func="yes">
                        <Overload retVal="" descr="Result too large to be represented.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OverflowError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.OverflowError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PendingDeprecationWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings about features which will be deprecated&#10;in the future.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PendingDeprecationWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PendingDeprecationWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PermissionError" func="yes">
                        <Overload retVal="" descr="Not enough permissions.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PermissionError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PermissionError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PermissionError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PermissionError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PermissionError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PermissionError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PermissionError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.PermissionError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ProcessLookupError" func="yes">
                        <Overload retVal="" descr="Process not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ProcessLookupError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ProcessLookupError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ProcessLookupError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ProcessLookupError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ProcessLookupError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ProcessLookupError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ProcessLookupError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ProcessLookupError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.RecursionError" func="yes">
                        <Overload retVal="" descr="Recursion limit exceeded.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.RecursionError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.RecursionError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ReferenceError" func="yes">
                        <Overload retVal="" descr="Weak ref proxy used after referent went away.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ReferenceError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ReferenceError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ResourceWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings about resource usage.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ResourceWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ResourceWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.RuntimeError" func="yes">
                        <Overload retVal="" descr="Unspecified run-time error.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.RuntimeError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.RuntimeError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.RuntimeWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings about dubious runtime behavior.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.RuntimeWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.RuntimeWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.StopAsyncIteration" func="yes">
                        <Overload retVal="" descr="Signal the end from iterator.__anext__().">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.StopAsyncIteration.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.StopAsyncIteration.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.StopIteration" func="yes">
                        <Overload retVal="" descr="Signal the end from iterator.__next__().">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.StopIteration.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.StopIteration.value" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.StopIteration.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxError" func="yes">
                        <Overload retVal="" descr="Invalid syntax.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxError.lineno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxError.msg" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxError.offset" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxError.print_file_and_line" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxError.text" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings about dubious syntax.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SyntaxWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SystemError" func="yes">
                        <Overload retVal="" descr="Internal error in the Python interpreter.&#10;&#10;Please report this to the Python maintainer, along with the traceback,&#10;the Python version, and the hardware/OS platform and version.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SystemError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SystemError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SystemExit" func="yes">
                        <Overload retVal="" descr="Request to exit from the interpreter.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SystemExit.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SystemExit.code" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.SystemExit.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TabError" func="yes">
                        <Overload retVal="" descr="Improper mixture of spaces and tabs.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TabError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TabError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TabError.lineno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TabError.msg" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TabError.offset" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TabError.print_file_and_line" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TabError.text" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TabError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TimeoutError" func="yes">
                        <Overload retVal="" descr="Timeout expired.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TimeoutError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TimeoutError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TimeoutError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TimeoutError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TimeoutError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TimeoutError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TimeoutError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TimeoutError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TypeError" func="yes">
                        <Overload retVal="" descr="Inappropriate argument type.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TypeError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.TypeError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnboundLocalError" func="yes">
                        <Overload retVal="" descr="Local name referenced but not bound to a value.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnboundLocalError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnboundLocalError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeDecodeError" func="yes">
                        <Overload retVal="" descr="Unicode decoding error.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeDecodeError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeDecodeError.encoding" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeDecodeError.end" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeDecodeError.object" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeDecodeError.reason" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeDecodeError.start" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeDecodeError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeEncodeError" func="yes">
                        <Overload retVal="" descr="Unicode encoding error.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeEncodeError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeEncodeError.encoding" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeEncodeError.end" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeEncodeError.object" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeEncodeError.reason" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeEncodeError.start" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeEncodeError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeError" func="yes">
                        <Overload retVal="" descr="Unicode related error.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeTranslateError" func="yes">
                        <Overload retVal="" descr="Unicode translation error.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeTranslateError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeTranslateError.encoding" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeTranslateError.end" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeTranslateError.object" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeTranslateError.reason" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeTranslateError.start" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeTranslateError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings about Unicode related problems, mostly&#10;related to conversion problems.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UnicodeWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UserWarning" func="yes">
                        <Overload retVal="" descr="Base class for warnings generated by user code.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UserWarning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.UserWarning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ValueError" func="yes">
                        <Overload retVal="" descr="Inappropriate argument value (of correct type).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ValueError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ValueError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.Warning" func="yes">
                        <Overload retVal="" descr="Base class for warning categories.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.Warning.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.Warning.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.WindowsError" func="yes">
                        <Overload retVal="" descr="Base class for I/O related errors.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.WindowsError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.WindowsError.characters_written" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.WindowsError.errno" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.WindowsError.filename" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.WindowsError.filename2" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.WindowsError.strerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.WindowsError.winerror" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.WindowsError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ZeroDivisionError" func="yes">
                        <Overload retVal="" descr="Second argument to a division or modulo operation was zero.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ZeroDivisionError.args" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ZeroDivisionError.with_traceback" func="yes">
                        <Overload retVal="" descr="Exception.with_traceback(tb) --&#10;set self.__traceback__ to tb and return self.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.abs" func="yes">
                        <Overload retVal="" descr="Return the absolute value of the argument.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.all" func="yes">
                        <Overload retVal="" descr="Return True if bool(x) is True for all values x in the iterable.&#10;&#10;If the iterable is empty, return True.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.any" func="yes">
                        <Overload retVal="" descr="Return True if bool(x) is True for any x in the iterable.&#10;&#10;If the iterable is empty, return False.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ascii" func="yes">
                        <Overload retVal="" descr="Return an ASCII-only representation of an object.&#10;&#10;As repr(), return a string containing a printable representation of an&#10;object, but escape the non-ASCII characters in the string returned by&#10;repr() using \\x, \\u or \\U escapes. This generates a string similar&#10;to that returned by repr() in Python 2.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bin" func="yes">
                        <Overload retVal="" descr="Return the binary representation of an integer.&#10;&#10;&gt;&gt;&gt; bin(2796202)&#10;'0b1010101010101010101010'">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bool" func="yes">
                        <Overload retVal="" descr="bool(x) -&gt; bool&#10;&#10;Returns True when the argument x is true, False otherwise.&#10;The builtins True and False are the only two instances of the class bool.&#10;The class bool is a subclass of the class int, and cannot be subclassed.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bool.bit_length" func="yes">
                        <Overload retVal="" descr="Number of bits necessary to represent self in binary.&#10;&#10;&gt;&gt;&gt; bin(37)&#10;'0b100101'&#10;&gt;&gt;&gt; (37).bit_length()&#10;6">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bool.conjugate" func="yes">
                        <Overload retVal="" descr="Returns self, the complex conjugate of any int.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bool.denominator" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bool.from_bytes" func="yes">
                        <Overload retVal="" descr="Return the integer represented by the given array of bytes.&#10;&#10;bytes&#10;  Holds the array of bytes to convert.  The argument must either&#10;  support the buffer protocol or be an iterable object producing bytes.&#10;  Bytes and bytearray are examples of built-in objects that support the&#10;  buffer protocol.&#10;byteorder&#10;  The byte order used to represent the integer.  If byteorder is 'big',&#10;  the most significant byte is at the beginning of the byte array.  If&#10;  byteorder is 'little', the most significant byte is at the end of the&#10;  byte array.  To request the native byte order of the host system, use&#10;  `sys.byteorder' as the byte order value.&#10;signed&#10;  Indicates whether two's complement is used to represent the integer.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bool.imag" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bool.numerator" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bool.real" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bool.to_bytes" func="yes">
                        <Overload retVal="" descr="Return an array of bytes representing an integer.&#10;&#10;length&#10;  Length of bytes object to use.  An OverflowError is raised if the&#10;  integer is not representable with the given number of bytes.&#10;byteorder&#10;  The byte order used to represent the integer.  If byteorder is 'big',&#10;  the most significant byte is at the beginning of the byte array.  If&#10;  byteorder is 'little', the most significant byte is at the end of the&#10;  byte array.  To request the native byte order of the host system, use&#10;  `sys.byteorder' as the byte order value.&#10;signed&#10;  Determines whether two's complement is used to represent the integer.&#10;  If signed is False and a negative integer is given, an OverflowError&#10;  is raised.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.breakpoint" func="yes">
                        <Overload retVal="" descr="breakpoint(*args, **kws)&#10;&#10;Call sys.breakpointhook(*args, **kws).  sys.breakpointhook() must accept&#10;whatever arguments are passed.&#10;&#10;By default, this drops you into the pdb debugger.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray" func="yes">
                        <Overload retVal="" descr="bytearray(iterable_of_ints) -&gt; bytearray&#10;bytearray(string, encoding[, errors]) -&gt; bytearray&#10;bytearray(bytes_or_buffer) -&gt; mutable copy of bytes_or_buffer&#10;bytearray(int) -&gt; bytes array of size given by the parameter initialized with null bytes&#10;bytearray() -&gt; empty bytes array&#10;&#10;Construct a mutable bytearray object from:&#10;  - an iterable yielding integers in range(256)&#10;  - a text string encoded using the specified encoding&#10;  - a bytes or a buffer object&#10;  - any object implementing the buffer API.&#10;  - an integer">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.append" func="yes">
                        <Overload retVal="" descr="Append a single item to the end of the bytearray.&#10;&#10;item&#10;  The item to be appended.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.capitalize" func="yes">
                        <Overload retVal="" descr="B.capitalize() -&gt; copy of B&#10;&#10;Return a copy of B with only its first character capitalized (ASCII)&#10;and the rest lower-cased.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.center" func="yes">
                        <Overload retVal="" descr="B.center(width[, fillchar]) -&gt; copy of B&#10;&#10;Return B centered in a string of length width.  Padding is&#10;done using the specified fill character (default is a space).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.clear" func="yes">
                        <Overload retVal="" descr="Remove all items from the bytearray.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.copy" func="yes">
                        <Overload retVal="" descr="Return a copy of B.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.count" func="yes">
                        <Overload retVal="" descr="B.count(sub[, start[, end]]) -&gt; int&#10;&#10;Return the number of non-overlapping occurrences of subsection sub in&#10;bytes B[start:end].  Optional arguments start and end are interpreted&#10;as in slice notation.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.decode" func="yes">
                        <Overload retVal="" descr="Decode the bytearray using the codec registered for encoding.&#10;&#10;encoding&#10;  The encoding with which to decode the bytearray.&#10;errors&#10;  The error handling scheme to use for the handling of decoding errors.&#10;  The default is 'strict' meaning that decoding errors raise a&#10;  UnicodeDecodeError. Other possible values are 'ignore' and 'replace'&#10;  as well as any other name registered with codecs.register_error that&#10;  can handle UnicodeDecodeErrors.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.endswith" func="yes">
                        <Overload retVal="" descr="B.endswith(suffix[, start[, end]]) -&gt; bool&#10;&#10;Return True if B ends with the specified suffix, False otherwise.&#10;With optional start, test B beginning at that position.&#10;With optional end, stop comparing B at that position.&#10;suffix can also be a tuple of bytes to try.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.expandtabs" func="yes">
                        <Overload retVal="" descr="B.expandtabs(tabsize=8) -&gt; copy of B&#10;&#10;Return a copy of B where all tab characters are expanded using spaces.&#10;If tabsize is not given, a tab size of 8 characters is assumed.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.extend" func="yes">
                        <Overload retVal="" descr="Append all the items from the iterator or sequence to the end of the bytearray.&#10;&#10;iterable_of_ints&#10;  The iterable of items to append.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.find" func="yes">
                        <Overload retVal="" descr="B.find(sub[, start[, end]]) -&gt; int&#10;&#10;Return the lowest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.fromhex" func="yes">
                        <Overload retVal="" descr="Create a bytearray object from a string of hexadecimal numbers.&#10;&#10;Spaces between two numbers are accepted.&#10;Example: bytearray.fromhex('B9 01EF') -&gt; bytearray(b'\\xb9\\x01\\xef')">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.hex" func="yes">
                        <Overload retVal="" descr="B.hex() -&gt; string&#10;&#10;Create a string of hexadecimal numbers from a bytearray object.&#10;Example: bytearray([0xb9, 0x01, 0xef]).hex() -&gt; 'b901ef'.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.index" func="yes">
                        <Overload retVal="" descr="B.index(sub[, start[, end]]) -&gt; int&#10;&#10;Return the lowest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Raises ValueError when the subsection is not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.insert" func="yes">
                        <Overload retVal="" descr="Insert a single item into the bytearray before the given index.&#10;&#10;index&#10;  The index where the value is to be inserted.&#10;item&#10;  The item to be inserted.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.isalnum" func="yes">
                        <Overload retVal="" descr="B.isalnum() -&gt; bool&#10;&#10;Return True if all characters in B are alphanumeric&#10;and there is at least one character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.isalpha" func="yes">
                        <Overload retVal="" descr="B.isalpha() -&gt; bool&#10;&#10;Return True if all characters in B are alphabetic&#10;and there is at least one character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.isascii" func="yes">
                        <Overload retVal="" descr="B.isascii() -&gt; bool&#10;&#10;Return True if B is empty or all characters in B are ASCII,&#10;False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.isdigit" func="yes">
                        <Overload retVal="" descr="B.isdigit() -&gt; bool&#10;&#10;Return True if all characters in B are digits&#10;and there is at least one character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.islower" func="yes">
                        <Overload retVal="" descr="B.islower() -&gt; bool&#10;&#10;Return True if all cased characters in B are lowercase and there is&#10;at least one cased character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.isspace" func="yes">
                        <Overload retVal="" descr="B.isspace() -&gt; bool&#10;&#10;Return True if all characters in B are whitespace&#10;and there is at least one character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.istitle" func="yes">
                        <Overload retVal="" descr="B.istitle() -&gt; bool&#10;&#10;Return True if B is a titlecased string and there is at least one&#10;character in B, i.e. uppercase characters may only follow uncased&#10;characters and lowercase characters only cased ones. Return False&#10;otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.isupper" func="yes">
                        <Overload retVal="" descr="B.isupper() -&gt; bool&#10;&#10;Return True if all cased characters in B are uppercase and there is&#10;at least one cased character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.join" func="yes">
                        <Overload retVal="" descr="Concatenate any number of bytes/bytearray objects.&#10;&#10;The bytearray whose method is called is inserted in between each pair.&#10;&#10;The result is returned as a new bytearray object.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.ljust" func="yes">
                        <Overload retVal="" descr="B.ljust(width[, fillchar]) -&gt; copy of B&#10;&#10;Return B left justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.lower" func="yes">
                        <Overload retVal="" descr="B.lower() -&gt; copy of B&#10;&#10;Return a copy of B with all ASCII characters converted to lowercase.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.lstrip" func="yes">
                        <Overload retVal="" descr="Strip leading bytes contained in the argument.&#10;&#10;If the argument is omitted or None, strip leading ASCII whitespace.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.maketrans" func="yes">
                        <Overload retVal="" descr="Return a translation table useable for the bytes or bytearray translate method.&#10;&#10;The returned table will be one where each byte in frm is mapped to the byte at&#10;the same position in to.&#10;&#10;The bytes objects frm and to must be of the same length.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.partition" func="yes">
                        <Overload retVal="" descr="Partition the bytearray into three parts using the given separator.&#10;&#10;This will search for the separator sep in the bytearray. If the separator is&#10;found, returns a 3-tuple containing the part before the separator, the&#10;separator itself, and the part after it as new bytearray objects.&#10;&#10;If the separator is not found, returns a 3-tuple containing the copy of the&#10;original bytearray object and two empty bytearray objects.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.pop" func="yes">
                        <Overload retVal="" descr="Remove and return a single item from B.&#10;&#10;  index&#10;    The index from where to remove the item.&#10;    -1 (the default value) means remove the last item.&#10;&#10;If no index argument is given, will pop the last item.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.remove" func="yes">
                        <Overload retVal="" descr="Remove the first occurrence of a value in the bytearray.&#10;&#10;value&#10;  The value to remove.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.replace" func="yes">
                        <Overload retVal="" descr="Return a copy with all occurrences of substring old replaced by new.&#10;&#10;  count&#10;    Maximum number of occurrences to replace.&#10;    -1 (the default value) means replace all occurrences.&#10;&#10;If the optional argument count is given, only the first count occurrences are&#10;replaced.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.reverse" func="yes">
                        <Overload retVal="" descr="Reverse the order of the values in B in place.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.rfind" func="yes">
                        <Overload retVal="" descr="B.rfind(sub[, start[, end]]) -&gt; int&#10;&#10;Return the highest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.rindex" func="yes">
                        <Overload retVal="" descr="B.rindex(sub[, start[, end]]) -&gt; int&#10;&#10;Return the highest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Raise ValueError when the subsection is not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.rjust" func="yes">
                        <Overload retVal="" descr="B.rjust(width[, fillchar]) -&gt; copy of B&#10;&#10;Return B right justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.rpartition" func="yes">
                        <Overload retVal="" descr="Partition the bytearray into three parts using the given separator.&#10;&#10;This will search for the separator sep in the bytearray, starting at the end.&#10;If the separator is found, returns a 3-tuple containing the part before the&#10;separator, the separator itself, and the part after it as new bytearray&#10;objects.&#10;&#10;If the separator is not found, returns a 3-tuple containing two empty bytearray&#10;objects and the copy of the original bytearray object.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.rsplit" func="yes">
                        <Overload retVal="" descr="Return a list of the sections in the bytearray, using sep as the delimiter.&#10;&#10;  sep&#10;    The delimiter according which to split the bytearray.&#10;    None (the default value) means split on ASCII whitespace characters&#10;    (space, tab, return, newline, formfeed, vertical tab).&#10;  maxsplit&#10;    Maximum number of splits to do.&#10;    -1 (the default value) means no limit.&#10;&#10;Splitting is done starting at the end of the bytearray and working to the front.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.rstrip" func="yes">
                        <Overload retVal="" descr="Strip trailing bytes contained in the argument.&#10;&#10;If the argument is omitted or None, strip trailing ASCII whitespace.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.split" func="yes">
                        <Overload retVal="" descr="Return a list of the sections in the bytearray, using sep as the delimiter.&#10;&#10;sep&#10;  The delimiter according which to split the bytearray.&#10;  None (the default value) means split on ASCII whitespace characters&#10;  (space, tab, return, newline, formfeed, vertical tab).&#10;maxsplit&#10;  Maximum number of splits to do.&#10;  -1 (the default value) means no limit.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.splitlines" func="yes">
                        <Overload retVal="" descr="Return a list of the lines in the bytearray, breaking at line boundaries.&#10;&#10;Line breaks are not included in the resulting list unless keepends is given and&#10;true.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.startswith" func="yes">
                        <Overload retVal="" descr="B.startswith(prefix[, start[, end]]) -&gt; bool&#10;&#10;Return True if B starts with the specified prefix, False otherwise.&#10;With optional start, test B beginning at that position.&#10;With optional end, stop comparing B at that position.&#10;prefix can also be a tuple of bytes to try.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.strip" func="yes">
                        <Overload retVal="" descr="Strip leading and trailing bytes contained in the argument.&#10;&#10;If the argument is omitted or None, strip leading and trailing ASCII whitespace.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.swapcase" func="yes">
                        <Overload retVal="" descr="B.swapcase() -&gt; copy of B&#10;&#10;Return a copy of B with uppercase ASCII characters converted&#10;to lowercase ASCII and vice versa.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.title" func="yes">
                        <Overload retVal="" descr="B.title() -&gt; copy of B&#10;&#10;Return a titlecased version of B, i.e. ASCII words start with uppercase&#10;characters, all remaining cased characters have lowercase.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.translate" func="yes">
                        <Overload retVal="" descr="Return a copy with each character mapped by the given translation table.&#10;&#10;  table&#10;    Translation table, which must be a bytes object of length 256.&#10;&#10;All characters occurring in the optional argument delete are removed.&#10;The remaining characters are mapped through the given translation table.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.upper" func="yes">
                        <Overload retVal="" descr="B.upper() -&gt; copy of B&#10;&#10;Return a copy of B with all ASCII characters converted to uppercase.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytearray.zfill" func="yes">
                        <Overload retVal="" descr="B.zfill(width) -&gt; copy of B&#10;&#10;Pad a numeric string B with zeros on the left, to fill a field&#10;of the specified width.  B is never truncated.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes" func="yes">
                        <Overload retVal="" descr="bytes(iterable_of_ints) -&gt; bytes&#10;bytes(string, encoding[, errors]) -&gt; bytes&#10;bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer&#10;bytes(int) -&gt; bytes object of size given by the parameter initialized with null bytes&#10;bytes() -&gt; empty bytes object&#10;&#10;Construct an immutable array of bytes from:&#10;  - an iterable yielding integers in range(256)&#10;  - a text string encoded using the specified encoding&#10;  - any object implementing the buffer API.&#10;  - an integer">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.capitalize" func="yes">
                        <Overload retVal="" descr="B.capitalize() -&gt; copy of B&#10;&#10;Return a copy of B with only its first character capitalized (ASCII)&#10;and the rest lower-cased.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.center" func="yes">
                        <Overload retVal="" descr="B.center(width[, fillchar]) -&gt; copy of B&#10;&#10;Return B centered in a string of length width.  Padding is&#10;done using the specified fill character (default is a space).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.count" func="yes">
                        <Overload retVal="" descr="B.count(sub[, start[, end]]) -&gt; int&#10;&#10;Return the number of non-overlapping occurrences of subsection sub in&#10;bytes B[start:end].  Optional arguments start and end are interpreted&#10;as in slice notation.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.decode" func="yes">
                        <Overload retVal="" descr="Decode the bytes using the codec registered for encoding.&#10;&#10;encoding&#10;  The encoding with which to decode the bytes.&#10;errors&#10;  The error handling scheme to use for the handling of decoding errors.&#10;  The default is 'strict' meaning that decoding errors raise a&#10;  UnicodeDecodeError. Other possible values are 'ignore' and 'replace'&#10;  as well as any other name registered with codecs.register_error that&#10;  can handle UnicodeDecodeErrors.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.endswith" func="yes">
                        <Overload retVal="" descr="B.endswith(suffix[, start[, end]]) -&gt; bool&#10;&#10;Return True if B ends with the specified suffix, False otherwise.&#10;With optional start, test B beginning at that position.&#10;With optional end, stop comparing B at that position.&#10;suffix can also be a tuple of bytes to try.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.expandtabs" func="yes">
                        <Overload retVal="" descr="B.expandtabs(tabsize=8) -&gt; copy of B&#10;&#10;Return a copy of B where all tab characters are expanded using spaces.&#10;If tabsize is not given, a tab size of 8 characters is assumed.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.find" func="yes">
                        <Overload retVal="" descr="B.find(sub[, start[, end]]) -&gt; int&#10;&#10;Return the lowest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.fromhex" func="yes">
                        <Overload retVal="" descr="Create a bytes object from a string of hexadecimal numbers.&#10;&#10;Spaces between two numbers are accepted.&#10;Example: bytes.fromhex('B9 01EF') -&gt; b'\\xb9\\x01\\xef'.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.hex" func="yes">
                        <Overload retVal="" descr="B.hex() -&gt; string&#10;&#10;Create a string of hexadecimal numbers from a bytes object.&#10;Example: b'\xb9\x01\xef'.hex() -&gt; 'b901ef'.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.index" func="yes">
                        <Overload retVal="" descr="B.index(sub[, start[, end]]) -&gt; int&#10;&#10;Return the lowest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Raises ValueError when the subsection is not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.isalnum" func="yes">
                        <Overload retVal="" descr="B.isalnum() -&gt; bool&#10;&#10;Return True if all characters in B are alphanumeric&#10;and there is at least one character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.isalpha" func="yes">
                        <Overload retVal="" descr="B.isalpha() -&gt; bool&#10;&#10;Return True if all characters in B are alphabetic&#10;and there is at least one character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.isascii" func="yes">
                        <Overload retVal="" descr="B.isascii() -&gt; bool&#10;&#10;Return True if B is empty or all characters in B are ASCII,&#10;False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.isdigit" func="yes">
                        <Overload retVal="" descr="B.isdigit() -&gt; bool&#10;&#10;Return True if all characters in B are digits&#10;and there is at least one character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.islower" func="yes">
                        <Overload retVal="" descr="B.islower() -&gt; bool&#10;&#10;Return True if all cased characters in B are lowercase and there is&#10;at least one cased character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.isspace" func="yes">
                        <Overload retVal="" descr="B.isspace() -&gt; bool&#10;&#10;Return True if all characters in B are whitespace&#10;and there is at least one character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.istitle" func="yes">
                        <Overload retVal="" descr="B.istitle() -&gt; bool&#10;&#10;Return True if B is a titlecased string and there is at least one&#10;character in B, i.e. uppercase characters may only follow uncased&#10;characters and lowercase characters only cased ones. Return False&#10;otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.isupper" func="yes">
                        <Overload retVal="" descr="B.isupper() -&gt; bool&#10;&#10;Return True if all cased characters in B are uppercase and there is&#10;at least one cased character in B, False otherwise.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.join" func="yes">
                        <Overload retVal="" descr="Concatenate any number of bytes objects.&#10;&#10;The bytes whose method is called is inserted in between each pair.&#10;&#10;The result is returned as a new bytes object.&#10;&#10;Example: b'.'.join([b'ab', b'pq', b'rs']) -&gt; b'ab.pq.rs'.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.ljust" func="yes">
                        <Overload retVal="" descr="B.ljust(width[, fillchar]) -&gt; copy of B&#10;&#10;Return B left justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.lower" func="yes">
                        <Overload retVal="" descr="B.lower() -&gt; copy of B&#10;&#10;Return a copy of B with all ASCII characters converted to lowercase.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.lstrip" func="yes">
                        <Overload retVal="" descr="Strip leading bytes contained in the argument.&#10;&#10;If the argument is omitted or None, strip leading  ASCII whitespace.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.maketrans" func="yes">
                        <Overload retVal="" descr="Return a translation table useable for the bytes or bytearray translate method.&#10;&#10;The returned table will be one where each byte in frm is mapped to the byte at&#10;the same position in to.&#10;&#10;The bytes objects frm and to must be of the same length.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.partition" func="yes">
                        <Overload retVal="" descr="Partition the bytes into three parts using the given separator.&#10;&#10;This will search for the separator sep in the bytes. If the separator is found,&#10;returns a 3-tuple containing the part before the separator, the separator&#10;itself, and the part after it.&#10;&#10;If the separator is not found, returns a 3-tuple containing the original bytes&#10;object and two empty bytes objects.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.replace" func="yes">
                        <Overload retVal="" descr="Return a copy with all occurrences of substring old replaced by new.&#10;&#10;  count&#10;    Maximum number of occurrences to replace.&#10;    -1 (the default value) means replace all occurrences.&#10;&#10;If the optional argument count is given, only the first count occurrences are&#10;replaced.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.rfind" func="yes">
                        <Overload retVal="" descr="B.rfind(sub[, start[, end]]) -&gt; int&#10;&#10;Return the highest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.rindex" func="yes">
                        <Overload retVal="" descr="B.rindex(sub[, start[, end]]) -&gt; int&#10;&#10;Return the highest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Raise ValueError when the subsection is not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.rjust" func="yes">
                        <Overload retVal="" descr="B.rjust(width[, fillchar]) -&gt; copy of B&#10;&#10;Return B right justified in a string of length width. Padding is&#10;done using the specified fill character (default is a space)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.rpartition" func="yes">
                        <Overload retVal="" descr="Partition the bytes into three parts using the given separator.&#10;&#10;This will search for the separator sep in the bytes, starting at the end. If&#10;the separator is found, returns a 3-tuple containing the part before the&#10;separator, the separator itself, and the part after it.&#10;&#10;If the separator is not found, returns a 3-tuple containing two empty bytes&#10;objects and the original bytes object.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.rsplit" func="yes">
                        <Overload retVal="" descr="Return a list of the sections in the bytes, using sep as the delimiter.&#10;&#10;  sep&#10;    The delimiter according which to split the bytes.&#10;    None (the default value) means split on ASCII whitespace characters&#10;    (space, tab, return, newline, formfeed, vertical tab).&#10;  maxsplit&#10;    Maximum number of splits to do.&#10;    -1 (the default value) means no limit.&#10;&#10;Splitting is done starting at the end of the bytes and working to the front.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.rstrip" func="yes">
                        <Overload retVal="" descr="Strip trailing bytes contained in the argument.&#10;&#10;If the argument is omitted or None, strip trailing ASCII whitespace.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.split" func="yes">
                        <Overload retVal="" descr="Return a list of the sections in the bytes, using sep as the delimiter.&#10;&#10;sep&#10;  The delimiter according which to split the bytes.&#10;  None (the default value) means split on ASCII whitespace characters&#10;  (space, tab, return, newline, formfeed, vertical tab).&#10;maxsplit&#10;  Maximum number of splits to do.&#10;  -1 (the default value) means no limit.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.splitlines" func="yes">
                        <Overload retVal="" descr="Return a list of the lines in the bytes, breaking at line boundaries.&#10;&#10;Line breaks are not included in the resulting list unless keepends is given and&#10;true.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.startswith" func="yes">
                        <Overload retVal="" descr="B.startswith(prefix[, start[, end]]) -&gt; bool&#10;&#10;Return True if B starts with the specified prefix, False otherwise.&#10;With optional start, test B beginning at that position.&#10;With optional end, stop comparing B at that position.&#10;prefix can also be a tuple of bytes to try.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.strip" func="yes">
                        <Overload retVal="" descr="Strip leading and trailing bytes contained in the argument.&#10;&#10;If the argument is omitted or None, strip leading and trailing ASCII whitespace.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.swapcase" func="yes">
                        <Overload retVal="" descr="B.swapcase() -&gt; copy of B&#10;&#10;Return a copy of B with uppercase ASCII characters converted&#10;to lowercase ASCII and vice versa.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.title" func="yes">
                        <Overload retVal="" descr="B.title() -&gt; copy of B&#10;&#10;Return a titlecased version of B, i.e. ASCII words start with uppercase&#10;characters, all remaining cased characters have lowercase.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.translate" func="yes">
                        <Overload retVal="" descr="Return a copy with each character mapped by the given translation table.&#10;&#10;  table&#10;    Translation table, which must be a bytes object of length 256.&#10;&#10;All characters occurring in the optional argument delete are removed.&#10;The remaining characters are mapped through the given translation table.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.upper" func="yes">
                        <Overload retVal="" descr="B.upper() -&gt; copy of B&#10;&#10;Return a copy of B with all ASCII characters converted to uppercase.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.bytes.zfill" func="yes">
                        <Overload retVal="" descr="B.zfill(width) -&gt; copy of B&#10;&#10;Pad a numeric string B with zeros on the left, to fill a field&#10;of the specified width.  B is never truncated.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.callable" func="yes">
                        <Overload retVal="" descr="Return whether the object is callable (i.e., some kind of function).&#10;&#10;Note that classes are callable, as are instances of classes with a&#10;__call__() method.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.chr" func="yes">
                        <Overload retVal="" descr="Return a Unicode string of one character with ordinal i; 0 &lt;= i &lt;= 0x10ffff.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.classmethod" func="yes">
                        <Overload retVal="" descr="classmethod(function) -&gt; method&#10;&#10;Convert a function to be a class method.&#10;&#10;A class method receives the class as implicit first argument,&#10;just like an instance method receives the instance.&#10;To declare a class method, use this idiom:&#10;&#10;  class C:&#10;      @classmethod&#10;      def f(cls, arg1, arg2, ...):&#10;          ...&#10;&#10;It can be called either on the class (e.g. C.f()) or on an instance&#10;(e.g. C().f()).  The instance is ignored except for its class.&#10;If a class method is called for a derived class, the derived class&#10;object is passed as the implied first argument.&#10;&#10;Class methods are different than C++ or Java static methods.&#10;If you want those, see the staticmethod builtin.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.compile" func="yes">
                        <Overload retVal="" descr="Compile source into a code object that can be executed by exec() or eval().&#10;&#10;The source code may represent a Python module, statement or expression.&#10;The filename will be used for run-time error messages.&#10;The mode must be 'exec' to compile a module, 'single' to compile a&#10;single (interactive) statement, or 'eval' to compile an expression.&#10;The flags argument, if present, controls which future statements influence&#10;the compilation of the code.&#10;The dont_inherit argument, if true, stops the compilation inheriting&#10;the effects of any future statements in effect in the code calling&#10;compile; if absent or false these statements do influence the compilation,&#10;in addition to any features explicitly specified.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.complex" func="yes">
                        <Overload retVal="" descr="Create a complex number from a real part and an optional imaginary part.&#10;&#10;This is equivalent to (real + imag*1j) where imag defaults to 0.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.complex.conjugate" func="yes">
                        <Overload retVal="" descr="complex.conjugate() -&gt; complex&#10;&#10;Return the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.complex.imag" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.complex.real" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.copyright" func="yes">
                        <Overload retVal="" descr="(_Printer)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.credits" func="yes">
                        <Overload retVal="" descr="(_Printer)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.delattr" func="yes">
                        <Overload retVal="" descr="Deletes the named attribute from the given object.&#10;&#10;delattr(x, 'y') is equivalent to ``del x.y''">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict" func="yes">
                        <Overload retVal="" descr="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's&#10;    (key, value) pairs&#10;dict(iterable) -&gt; new dictionary initialized as if via:&#10;    d = {}&#10;    for k, v in iterable:&#10;        d[k] = v&#10;dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs&#10;    in the keyword argument list.  For example:  dict(one=1, two=2)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.clear" func="yes">
                        <Overload retVal="" descr="D.clear() -&gt; None.  Remove all items from D.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.copy" func="yes">
                        <Overload retVal="" descr="D.copy() -&gt; a shallow copy of D">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.fromkeys" func="yes">
                        <Overload retVal="" descr="Create a new dictionary with keys from iterable and values set to value.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.get" func="yes">
                        <Overload retVal="" descr="Return the value for key if key is in the dictionary, else default.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.items" func="yes">
                        <Overload retVal="" descr="D.items() -&gt; a set-like object providing a view on D's items">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.keys" func="yes">
                        <Overload retVal="" descr="D.keys() -&gt; a set-like object providing a view on D's keys">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.pop" func="yes">
                        <Overload retVal="" descr="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.&#10;If key is not found, d is returned if given, otherwise KeyError is raised">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.popitem" func="yes">
                        <Overload retVal="" descr="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a&#10;2-tuple; but raise KeyError if D is empty.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.setdefault" func="yes">
                        <Overload retVal="" descr="Insert key with a value of default if key is not in the dictionary.&#10;&#10;Return the value for key if key is in the dictionary, else default.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.update" func="yes">
                        <Overload retVal="" descr="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.&#10;If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]&#10;If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v&#10;In either case, this is followed by: for k in F:  D[k] = F[k]">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dict.values" func="yes">
                        <Overload retVal="" descr="D.values() -&gt; an object providing a view on D's values">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.dir" func="yes">
                        <Overload retVal="" descr="dir([object]) -&gt; list of strings&#10;&#10;If called without an argument, return the names in the current scope.&#10;Else, return an alphabetized list of names comprising (some of) the attributes&#10;of the given object, and of attributes reachable from it.&#10;If the object supplies a method named __dir__, it will be used; otherwise&#10;the default dir() logic is used and returns:&#10;  for a module object: the module's attributes.&#10;  for a class object:  its attributes, and recursively the attributes&#10;    of its bases.&#10;  for any other object: its attributes, its class's attributes, and&#10;    recursively the attributes of its class's base classes.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.divmod" func="yes">
                        <Overload retVal="" descr="Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.enumerate" func="yes">
                        <Overload retVal="" descr="Return an enumerate object.&#10;&#10;  iterable&#10;    an object supporting iteration&#10;&#10;The enumerate object yields pairs containing a count (from start, which&#10;defaults to zero) and a value yielded by the iterable argument.&#10;&#10;enumerate is useful for obtaining an indexed list:&#10;    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.eval" func="yes">
                        <Overload retVal="" descr="Evaluate the given source in the context of globals and locals.&#10;&#10;The source may be a string representing a Python expression&#10;or a code object as returned by compile().&#10;The globals must be a dictionary and locals can be any mapping,&#10;defaulting to the current globals and locals.&#10;If only globals is given, locals defaults to it.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.exec" func="yes">
                        <Overload retVal="" descr="Execute the given source in the context of globals and locals.&#10;&#10;The source may be a string representing one or more Python statements&#10;or a code object as returned by compile().&#10;The globals must be a dictionary and locals can be any mapping,&#10;defaulting to the current globals and locals.&#10;If only globals is given, locals defaults to it.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.exit" func="yes">
                        <Overload retVal="" descr="(Quitter)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.filter" func="yes">
                        <Overload retVal="" descr="filter(function or None, iterable) --&gt; filter object&#10;&#10;Return an iterator yielding those items of iterable for which function(item)&#10;is true. If function is None, return the items that are true.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.float" func="yes">
                        <Overload retVal="" descr="Convert a string or number to a floating point number, if possible.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.float.as_integer_ratio" func="yes">
                        <Overload retVal="" descr="Return integer ratio.&#10;&#10;Return a pair of integers, whose ratio is exactly equal to the original float&#10;and with a positive denominator.&#10;&#10;Raise OverflowError on infinities and a ValueError on NaNs.&#10;&#10;&gt;&gt;&gt; (10.0).as_integer_ratio()&#10;(10, 1)&#10;&gt;&gt;&gt; (0.0).as_integer_ratio()&#10;(0, 1)&#10;&gt;&gt;&gt; (-.25).as_integer_ratio()&#10;(-1, 4)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.float.conjugate" func="yes">
                        <Overload retVal="" descr="Return self, the complex conjugate of any float.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.float.fromhex" func="yes">
                        <Overload retVal="" descr="Create a floating-point number from a hexadecimal string.&#10;&#10;&gt;&gt;&gt; float.fromhex('0x1.ffffp10')&#10;2047.984375&#10;&gt;&gt;&gt; float.fromhex('-0x1p-1074')&#10;-5e-324">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.float.hex" func="yes">
                        <Overload retVal="" descr="Return a hexadecimal representation of a floating-point number.&#10;&#10;&gt;&gt;&gt; (-0.1).hex()&#10;'-0x1.999999999999ap-4'&#10;&gt;&gt;&gt; 3.14159.hex()&#10;'0x1.921f9f01b866ep+1'">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.float.imag" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.float.is_integer" func="yes">
                        <Overload retVal="" descr="Return True if the float is an integer.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.float.real" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.format" func="yes">
                        <Overload retVal="" descr="Return value.__format__(format_spec)&#10;&#10;format_spec defaults to the empty string.&#10;See the Format Specification Mini-Language section of help('FORMATTING') for&#10;details.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.frozenset" func="yes">
                        <Overload retVal="" descr="frozenset() -&gt; empty frozenset object&#10;frozenset(iterable) -&gt; frozenset object&#10;&#10;Build an immutable unordered collection of unique elements.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.frozenset.copy" func="yes">
                        <Overload retVal="" descr="Return a shallow copy of a set.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.frozenset.difference" func="yes">
                        <Overload retVal="" descr="Return the difference of two or more sets as a new set.&#10;&#10;(i.e. all elements that are in this set but not the others.)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.frozenset.intersection" func="yes">
                        <Overload retVal="" descr="Return the intersection of two sets as a new set.&#10;&#10;(i.e. all elements that are in both sets.)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.frozenset.isdisjoint" func="yes">
                        <Overload retVal="" descr="Return True if two sets have a null intersection.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.frozenset.issubset" func="yes">
                        <Overload retVal="" descr="Report whether another set contains this set.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.frozenset.issuperset" func="yes">
                        <Overload retVal="" descr="Report whether this set contains another set.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.frozenset.symmetric_difference" func="yes">
                        <Overload retVal="" descr="Return the symmetric difference of two sets as a new set.&#10;&#10;(i.e. all elements that are in exactly one of the sets.)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.frozenset.union" func="yes">
                        <Overload retVal="" descr="Return the union of sets as a new set.&#10;&#10;(i.e. all elements that are in either set.)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.getattr" func="yes">
                        <Overload retVal="" descr="getattr(object, name[, default]) -&gt; value&#10;&#10;Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.&#10;When a default argument is given, it is returned when the attribute doesn't&#10;exist; without it, an exception is raised in that case.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.globals" func="yes">
                        <Overload retVal="" descr="Return the dictionary containing the current scope's global variables.&#10;&#10;NOTE: Updates to this dictionary *will* affect name lookups in the current&#10;global scope and vice-versa.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.hasattr" func="yes">
                        <Overload retVal="" descr="Return whether the object has an attribute with the given name.&#10;&#10;This is done by calling getattr(obj, name) and catching AttributeError.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.hash" func="yes">
                        <Overload retVal="" descr="Return the hash value for the given object.&#10;&#10;Two objects that compare equal must also have the same hash value, but the&#10;reverse is not necessarily true.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.help" func="yes">
                        <Overload retVal="" descr="(_Helper)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.hex" func="yes">
                        <Overload retVal="" descr="Return the hexadecimal representation of an integer.&#10;&#10;&gt;&gt;&gt; hex(12648430)&#10;'0xc0ffee'">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.id" func="yes">
                        <Overload retVal="" descr="Return the identity of an object.&#10;&#10;This is guaranteed to be unique among simultaneously existing objects.&#10;(CPython uses the object's memory address.)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.input" func="yes">
                        <Overload retVal="" descr="Read a string from standard input.  The trailing newline is stripped.&#10;&#10;The prompt string, if given, is printed to standard output without a&#10;trailing newline before reading input.&#10;&#10;If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError.&#10;On *nix systems, readline is used if available.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.int" func="yes">
                        <Overload retVal="" descr="int([x]) -&gt; integer&#10;int(x, base=10) -&gt; integer&#10;&#10;Convert a number or string to an integer, or return 0 if no arguments&#10;are given.  If x is a number, return x.__int__().  For floating point&#10;numbers, this truncates towards zero.&#10;&#10;If x is not a number or if base is given, then x must be a string,&#10;bytes, or bytearray instance representing an integer literal in the&#10;given base.  The literal can be preceded by '+' or '-' and be surrounded&#10;by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.&#10;Base 0 means to interpret the base from the string as an integer literal.&#10;&gt;&gt;&gt; int('0b100', base=0)&#10;4">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.int.bit_length" func="yes">
                        <Overload retVal="" descr="Number of bits necessary to represent self in binary.&#10;&#10;&gt;&gt;&gt; bin(37)&#10;'0b100101'&#10;&gt;&gt;&gt; (37).bit_length()&#10;6">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.int.conjugate" func="yes">
                        <Overload retVal="" descr="Returns self, the complex conjugate of any int.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.int.denominator" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.int.from_bytes" func="yes">
                        <Overload retVal="" descr="Return the integer represented by the given array of bytes.&#10;&#10;bytes&#10;  Holds the array of bytes to convert.  The argument must either&#10;  support the buffer protocol or be an iterable object producing bytes.&#10;  Bytes and bytearray are examples of built-in objects that support the&#10;  buffer protocol.&#10;byteorder&#10;  The byte order used to represent the integer.  If byteorder is 'big',&#10;  the most significant byte is at the beginning of the byte array.  If&#10;  byteorder is 'little', the most significant byte is at the end of the&#10;  byte array.  To request the native byte order of the host system, use&#10;  `sys.byteorder' as the byte order value.&#10;signed&#10;  Indicates whether two's complement is used to represent the integer.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.int.imag" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.int.numerator" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.int.real" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.int.to_bytes" func="yes">
                        <Overload retVal="" descr="Return an array of bytes representing an integer.&#10;&#10;length&#10;  Length of bytes object to use.  An OverflowError is raised if the&#10;  integer is not representable with the given number of bytes.&#10;byteorder&#10;  The byte order used to represent the integer.  If byteorder is 'big',&#10;  the most significant byte is at the beginning of the byte array.  If&#10;  byteorder is 'little', the most significant byte is at the end of the&#10;  byte array.  To request the native byte order of the host system, use&#10;  `sys.byteorder' as the byte order value.&#10;signed&#10;  Determines whether two's complement is used to represent the integer.&#10;  If signed is False and a negative integer is given, an OverflowError&#10;  is raised.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.isinstance" func="yes">
                        <Overload retVal="" descr="Return whether an object is an instance of a class or of a subclass thereof.&#10;&#10;A tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to&#10;check against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)&#10;or ...`` etc.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.issubclass" func="yes">
                        <Overload retVal="" descr="Return whether 'cls' is a derived from another class or is the same class.&#10;&#10;A tuple, as in ``issubclass(x, (A, B, ...))``, may be given as the target to&#10;check against. This is equivalent to ``issubclass(x, A) or issubclass(x, B)&#10;or ...`` etc.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.iter" func="yes">
                        <Overload retVal="" descr="iter(iterable) -&gt; iterator&#10;iter(callable, sentinel) -&gt; iterator&#10;&#10;Get an iterator from an object.  In the first form, the argument must&#10;supply its own iterator, or be a sequence.&#10;In the second form, the callable is called until it returns the sentinel.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.len" func="yes">
                        <Overload retVal="" descr="Return the number of items in a container.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.license" func="yes">
                        <Overload retVal="" descr="(_Printer)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list" func="yes">
                        <Overload retVal="" descr="Built-in mutable sequence.&#10;&#10;If no argument is given, the constructor creates a new empty list.&#10;The argument must be an iterable if specified.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.append" func="yes">
                        <Overload retVal="" descr="Append object to the end of the list.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.clear" func="yes">
                        <Overload retVal="" descr="Remove all items from list.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.copy" func="yes">
                        <Overload retVal="" descr="Return a shallow copy of the list.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.count" func="yes">
                        <Overload retVal="" descr="Return number of occurrences of value.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.extend" func="yes">
                        <Overload retVal="" descr="Extend list by appending elements from the iterable.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.index" func="yes">
                        <Overload retVal="" descr="Return first index of value.&#10;&#10;Raises ValueError if the value is not present.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.insert" func="yes">
                        <Overload retVal="" descr="Insert object before index.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.pop" func="yes">
                        <Overload retVal="" descr="Remove and return item at index (default last).&#10;&#10;Raises IndexError if list is empty or index is out of range.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.remove" func="yes">
                        <Overload retVal="" descr="Remove first occurrence of value.&#10;&#10;Raises ValueError if the value is not present.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.reverse" func="yes">
                        <Overload retVal="" descr="Reverse *IN PLACE*.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.list.sort" func="yes">
                        <Overload retVal="" descr="Stable sort *IN PLACE*.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.locals" func="yes">
                        <Overload retVal="" descr="Return a dictionary containing the current scope's local variables.&#10;&#10;NOTE: Whether or not updates to this dictionary will affect name lookups in&#10;the local scope and vice-versa is *implementation dependent* and not&#10;covered by any backwards compatibility guarantees.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.map" func="yes">
                        <Overload retVal="" descr="map(func, *iterables) --&gt; map object&#10;&#10;Make an iterator that computes the function using arguments from&#10;each of the iterables.  Stops when the shortest iterable is exhausted.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.max" func="yes">
                        <Overload retVal="" descr="max(iterable, *[, default=obj, key=func]) -&gt; value&#10;max(arg1, arg2, *args, *[, key=func]) -&gt; value&#10;&#10;With a single iterable argument, return its biggest item. The&#10;default keyword-only argument specifies an object to return if&#10;the provided iterable is empty.&#10;With two or more arguments, return the largest argument.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview" func="yes">
                        <Overload retVal="" descr="Create a new memoryview object which references the given object.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.c_contiguous" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.cast" func="yes">
                        <Overload retVal="" descr="Cast a memoryview to a new format or shape.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.contiguous" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.f_contiguous" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.format" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.hex" func="yes">
                        <Overload retVal="" descr="Return the data in the buffer as a string of hexadecimal numbers.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.itemsize" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.nbytes" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.ndim" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.obj" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.readonly" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.release" func="yes">
                        <Overload retVal="" descr="Release the underlying buffer exposed by the memoryview object.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.shape" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.strides" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.suboffsets" func="yes">
                        <Overload retVal="" descr="(getset_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.tobytes" func="yes">
                        <Overload retVal="" descr="Return the data in the buffer as a byte string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.memoryview.tolist" func="yes">
                        <Overload retVal="" descr="Return the data in the buffer as a list of elements.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.min" func="yes">
                        <Overload retVal="" descr="min(iterable, *[, default=obj, key=func]) -&gt; value&#10;min(arg1, arg2, *args, *[, key=func]) -&gt; value&#10;&#10;With a single iterable argument, return its smallest item. The&#10;default keyword-only argument specifies an object to return if&#10;the provided iterable is empty.&#10;With two or more arguments, return the smallest argument.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.next" func="yes">
                        <Overload retVal="" descr="next(iterator[, default])&#10;&#10;Return the next item from the iterator. If default is given and the iterator&#10;is exhausted, it is returned instead of raising StopIteration.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.object" func="yes">
                        <Overload retVal="" descr="The most base type">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.oct" func="yes">
                        <Overload retVal="" descr="Return the octal representation of an integer.&#10;&#10;&gt;&gt;&gt; oct(342391)&#10;'0o1234567'">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.open" func="yes">
                        <Overload retVal="" descr="Open file and return a stream.  Raise OSError upon failure.&#10;&#10;file is either a text or byte string giving the name (and the path&#10;if the file isn't in the current working directory) of the file to&#10;be opened or an integer file descriptor of the file to be&#10;wrapped. (If a file descriptor is given, it is closed when the&#10;returned I/O object is closed, unless closefd is set to False.)&#10;&#10;mode is an optional string that specifies the mode in which the file&#10;is opened. It defaults to 'r' which means open for reading in text&#10;mode.  Other common values are 'w' for writing (truncating the file if&#10;it already exists), 'x' for creating and writing to a new file, and&#10;'a' for appending (which on some Unix systems, means that all writes&#10;append to the end of the file regardless of the current seek position).&#10;In text mode, if encoding is not specified the encoding used is platform&#10;dependent: locale.getpreferredencoding(False) is called to get the&#10;current locale encoding. (For reading and writing raw bytes use binary&#10;mode and leave encoding unspecified.) The available modes are:&#10;&#10;========= ===============================================================&#10;Character Meaning&#10;--------- ---------------------------------------------------------------&#10;'r'       open for reading (default)&#10;'w'       open for writing, truncating the file first&#10;'x'       create a new file and open it for writing&#10;'a'       open for writing, appending to the end of the file if it exists&#10;'b'       binary mode&#10;'t'       text mode (default)&#10;'+'       open a disk file for updating (reading and writing)&#10;'U'       universal newline mode (deprecated)&#10;========= ===============================================================&#10;&#10;The default mode is 'rt' (open for reading text). For binary random&#10;access, the mode 'w+b' opens and truncates the file to 0 bytes, while&#10;'r+b' opens the file without truncation. The 'x' mode implies 'w' and&#10;raises an `FileExistsError` if the file already exists.&#10;&#10;Python distinguishes between files opened in binary and text modes,&#10;even when the underlying operating system doesn't. Files opened in&#10;binary mode (appending 'b' to the mode argument) return contents as&#10;bytes objects without any decoding. In text mode (the default, or when&#10;'t' is appended to the mode argument), the contents of the file are&#10;returned as strings, the bytes having been first decoded using a&#10;platform-dependent encoding or using the specified encoding if given.&#10;&#10;'U' mode is deprecated and will raise an exception in future versions&#10;of Python.  It has no effect in Python 3.  Use newline to control&#10;universal newlines mode.&#10;&#10;buffering is an optional integer used to set the buffering policy.&#10;Pass 0 to switch buffering off (only allowed in binary mode), 1 to select&#10;line buffering (only usable in text mode), and an integer &gt; 1 to indicate&#10;the size of a fixed-size chunk buffer.  When no buffering argument is&#10;given, the default buffering policy works as follows:&#10;&#10;* Binary files are buffered in fixed-size chunks; the size of the buffer&#10;  is chosen using a heuristic trying to determine the underlying device's&#10;  &quot;block size&quot; and falling back on `io.DEFAULT_BUFFER_SIZE`.&#10;  On many systems, the buffer will typically be 4096 or 8192 bytes long.&#10;&#10;* &quot;Interactive&quot; text files (files for which isatty() returns True)&#10;  use line buffering.  Other text files use the policy described above&#10;  for binary files.&#10;&#10;encoding is the name of the encoding used to decode or encode the&#10;file. This should only be used in text mode. The default encoding is&#10;platform dependent, but any encoding supported by Python can be&#10;passed.  See the codecs module for the list of supported encodings.&#10;&#10;errors is an optional string that specifies how encoding errors are to&#10;be handled---this argument should not be used in binary mode. Pass&#10;'strict' to raise a ValueError exception if there is an encoding error&#10;(the default of None has the same effect), or pass 'ignore' to ignore&#10;errors. (Note that ignoring encoding errors can lead to data loss.)&#10;See the documentation for codecs.register or run 'help(codecs.Codec)'&#10;for a list of the permitted encoding error strings.&#10;&#10;newline controls how universal newlines works (it only applies to text&#10;mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as&#10;follows:&#10;&#10;* On input, if newline is None, universal newlines mode is&#10;  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and&#10;  these are translated into '\n' before being returned to the&#10;  caller. If it is '', universal newline mode is enabled, but line&#10;  endings are returned to the caller untranslated. If it has any of&#10;  the other legal values, input lines are only terminated by the given&#10;  string, and the line ending is returned to the caller untranslated.&#10;&#10;* On output, if newline is None, any '\n' characters written are&#10;  translated to the system default line separator, os.linesep. If&#10;  newline is '' or '\n', no translation takes place. If newline is any&#10;  of the other legal values, any '\n' characters written are translated&#10;  to the given string.&#10;&#10;If closefd is False, the underlying file descriptor will be kept open&#10;when the file is closed. This does not work when a file name is given&#10;and must be True in that case.&#10;&#10;A custom opener can be used by passing a callable as *opener*. The&#10;underlying file descriptor for the file object is then obtained by&#10;calling *opener* with (*file*, *flags*). *opener* must return an open&#10;file descriptor (passing os.open as *opener* results in functionality&#10;similar to passing None).&#10;&#10;open() returns a file object whose type depends on the mode, and&#10;through which the standard file operations such as reading and writing&#10;are performed. When open() is used to open a file in a text mode ('w',&#10;'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open&#10;a file in a binary mode, the returned class varies: in read binary&#10;mode, it returns a BufferedReader; in write binary and append binary&#10;modes, it returns a BufferedWriter, and in read/write mode, it returns&#10;a BufferedRandom.&#10;&#10;It is also possible to use a string or bytearray as a file for both&#10;reading and writing. For strings StringIO can be used like a file&#10;opened in a text mode, and for bytes a BytesIO can be used like a file&#10;opened in a binary mode.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.ord" func="yes">
                        <Overload retVal="" descr="Return the Unicode code point for a one-character string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.pow" func="yes">
                        <Overload retVal="" descr="Equivalent to x**y (with two arguments) or x**y % z (with three arguments)&#10;&#10;Some types, such as ints, are able to use a more efficient algorithm when&#10;invoked using the three argument form.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.print" func="yes">
                        <Overload retVal="" descr="print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)&#10;&#10;Prints the values to a stream, or to sys.stdout by default.&#10;Optional keyword arguments:&#10;file:  a file-like object (stream); defaults to the current sys.stdout.&#10;sep:   string inserted between values, default a space.&#10;end:   string appended after the last value, default a newline.&#10;flush: whether to forcibly flush the stream.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.property" func="yes">
                        <Overload retVal="" descr="Property attribute.&#10;&#10;  fget&#10;    function to be used for getting an attribute value&#10;  fset&#10;    function to be used for setting an attribute value&#10;  fdel&#10;    function to be used for del'ing an attribute&#10;  doc&#10;    docstring&#10;&#10;Typical use is to define a managed attribute x:&#10;&#10;class C(object):&#10;    def getx(self): return self._x&#10;    def setx(self, value): self._x = value&#10;    def delx(self): del self._x&#10;    x = property(getx, setx, delx, &quot;I'm the 'x' property.&quot;)&#10;&#10;Decorators make defining new properties or modifying existing ones easy:&#10;&#10;class C(object):&#10;    @property&#10;    def x(self):&#10;        &quot;I am the 'x' property.&quot;&#10;        return self._x&#10;    @x.setter&#10;    def x(self, value):&#10;        self._x = value&#10;    @x.deleter&#10;    def x(self):&#10;        del self._x">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.property.deleter" func="yes">
                        <Overload retVal="" descr="Descriptor to change the deleter on a property.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.property.fdel" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.property.fget" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.property.fset" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.property.getter" func="yes">
                        <Overload retVal="" descr="Descriptor to change the getter on a property.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.property.setter" func="yes">
                        <Overload retVal="" descr="Descriptor to change the setter on a property.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.quit" func="yes">
                        <Overload retVal="" descr="(Quitter)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.range" func="yes">
                        <Overload retVal="" descr="range(stop) -&gt; range object&#10;range(start, stop[, step]) -&gt; range object&#10;&#10;Return an object that produces a sequence of integers from start (inclusive)&#10;to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.&#10;start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.&#10;These are exactly the valid indices for a list of 4 elements.&#10;When step is given, it specifies the increment (or decrement).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.range.count" func="yes">
                        <Overload retVal="" descr="rangeobject.count(value) -&gt; integer -- return number of occurrences of value">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.range.index" func="yes">
                        <Overload retVal="" descr="rangeobject.index(value) -&gt; integer -- return index of value.&#10;Raise ValueError if the value is not present.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.range.start" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.range.step" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.range.stop" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.repr" func="yes">
                        <Overload retVal="" descr="Return the canonical string representation of the object.&#10;&#10;For many object types, including most builtins, eval(repr(obj)) == obj.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.reversed" func="yes">
                        <Overload retVal="" descr="Return a reverse iterator over the values of the given sequence.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.round" func="yes">
                        <Overload retVal="" descr="Round a number to a given precision in decimal digits.&#10;&#10;The return value is an integer if ndigits is omitted or None.  Otherwise&#10;the return value has the same type as the number.  ndigits may be negative.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set" func="yes">
                        <Overload retVal="" descr="set() -&gt; new empty set object&#10;set(iterable) -&gt; new set object&#10;&#10;Build an unordered collection of unique elements.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.add" func="yes">
                        <Overload retVal="" descr="Add an element to a set.&#10;&#10;This has no effect if the element is already present.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.clear" func="yes">
                        <Overload retVal="" descr="Remove all elements from this set.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.copy" func="yes">
                        <Overload retVal="" descr="Return a shallow copy of a set.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.difference" func="yes">
                        <Overload retVal="" descr="Return the difference of two or more sets as a new set.&#10;&#10;(i.e. all elements that are in this set but not the others.)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.difference_update" func="yes">
                        <Overload retVal="" descr="Remove all elements of another set from this set.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.discard" func="yes">
                        <Overload retVal="" descr="Remove an element from a set if it is a member.&#10;&#10;If the element is not a member, do nothing.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.intersection" func="yes">
                        <Overload retVal="" descr="Return the intersection of two sets as a new set.&#10;&#10;(i.e. all elements that are in both sets.)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.intersection_update" func="yes">
                        <Overload retVal="" descr="Update a set with the intersection of itself and another.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.isdisjoint" func="yes">
                        <Overload retVal="" descr="Return True if two sets have a null intersection.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.issubset" func="yes">
                        <Overload retVal="" descr="Report whether another set contains this set.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.issuperset" func="yes">
                        <Overload retVal="" descr="Report whether this set contains another set.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.pop" func="yes">
                        <Overload retVal="" descr="Remove and return an arbitrary set element.&#10;Raises KeyError if the set is empty.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.remove" func="yes">
                        <Overload retVal="" descr="Remove an element from a set; it must be a member.&#10;&#10;If the element is not a member, raise a KeyError.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.symmetric_difference" func="yes">
                        <Overload retVal="" descr="Return the symmetric difference of two sets as a new set.&#10;&#10;(i.e. all elements that are in exactly one of the sets.)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.symmetric_difference_update" func="yes">
                        <Overload retVal="" descr="Update a set with the symmetric difference of itself and another.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.union" func="yes">
                        <Overload retVal="" descr="Return the union of sets as a new set.&#10;&#10;(i.e. all elements that are in either set.)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.set.update" func="yes">
                        <Overload retVal="" descr="Update a set with the union of itself and others.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.setattr" func="yes">
                        <Overload retVal="" descr="Sets the named attribute on the given object to the specified value.&#10;&#10;setattr(x, 'y', v) is equivalent to ``x.y = v''">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.slice" func="yes">
                        <Overload retVal="" descr="slice(stop)&#10;slice(start, stop[, step])&#10;&#10;Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.slice.indices" func="yes">
                        <Overload retVal="" descr="S.indices(len) -&gt; (start, stop, stride)&#10;&#10;Assuming a sequence of length len, calculate the start and stop&#10;indices, and the stride length of the extended slice described by&#10;S. Out of bounds indices are clipped in a manner consistent with the&#10;handling of normal slices.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.slice.start" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.slice.step" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.slice.stop" func="yes">
                        <Overload retVal="" descr="(member_descriptor)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.sorted" func="yes">
                        <Overload retVal="" descr="Return a new list containing all items from the iterable in ascending order.&#10;&#10;A custom key function can be supplied to customize the sort order, and the&#10;reverse flag can be set to request the result in descending order.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.staticmethod" func="yes">
                        <Overload retVal="" descr="staticmethod(function) -&gt; method&#10;&#10;Convert a function to be a static method.&#10;&#10;A static method does not receive an implicit first argument.&#10;To declare a static method, use this idiom:&#10;&#10;     class C:&#10;         @staticmethod&#10;         def f(arg1, arg2, ...):&#10;             ...&#10;&#10;It can be called either on the class (e.g. C.f()) or on an instance&#10;(e.g. C().f()).  The instance is ignored except for its class.&#10;&#10;Static methods in Python are similar to those found in Java or C++.&#10;For a more advanced concept, see the classmethod builtin.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str" func="yes">
                        <Overload retVal="" descr="str(object='') -&gt; str&#10;str(bytes_or_buffer[, encoding[, errors]]) -&gt; str&#10;&#10;Create a new string object from the given object. If encoding or&#10;errors is specified, then the object must expose a data buffer&#10;that will be decoded using the given encoding and error handler.&#10;Otherwise, returns the result of object.__str__() (if defined)&#10;or repr(object).&#10;encoding defaults to sys.getdefaultencoding().&#10;errors defaults to 'strict'.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.capitalize" func="yes">
                        <Overload retVal="" descr="Return a capitalized version of the string.&#10;&#10;More specifically, make the first character have upper case and the rest lower&#10;case.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.casefold" func="yes">
                        <Overload retVal="" descr="Return a version of the string suitable for caseless comparisons.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.center" func="yes">
                        <Overload retVal="" descr="Return a centered string of length width.&#10;&#10;Padding is done using the specified fill character (default is a space).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.count" func="yes">
                        <Overload retVal="" descr="S.count(sub[, start[, end]]) -&gt; int&#10;&#10;Return the number of non-overlapping occurrences of substring sub in&#10;string S[start:end].  Optional arguments start and end are&#10;interpreted as in slice notation.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.encode" func="yes">
                        <Overload retVal="" descr="Encode the string using the codec registered for encoding.&#10;&#10;encoding&#10;  The encoding in which to encode the string.&#10;errors&#10;  The error handling scheme to use for encoding errors.&#10;  The default is 'strict' meaning that encoding errors raise a&#10;  UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and&#10;  'xmlcharrefreplace' as well as any other name registered with&#10;  codecs.register_error that can handle UnicodeEncodeErrors.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.endswith" func="yes">
                        <Overload retVal="" descr="S.endswith(suffix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S ends with the specified suffix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;suffix can also be a tuple of strings to try.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.expandtabs" func="yes">
                        <Overload retVal="" descr="Return a copy where all tab characters are expanded using spaces.&#10;&#10;If tabsize is not given, a tab size of 8 characters is assumed.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.find" func="yes">
                        <Overload retVal="" descr="S.find(sub[, start[, end]]) -&gt; int&#10;&#10;Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.format" func="yes">
                        <Overload retVal="" descr="S.format(*args, **kwargs) -&gt; str&#10;&#10;Return a formatted version of S, using substitutions from args and kwargs.&#10;The substitutions are identified by braces ('{' and '}').">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.format_map" func="yes">
                        <Overload retVal="" descr="S.format_map(mapping) -&gt; str&#10;&#10;Return a formatted version of S, using substitutions from mapping.&#10;The substitutions are identified by braces ('{' and '}').">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.index" func="yes">
                        <Overload retVal="" descr="S.index(sub[, start[, end]]) -&gt; int&#10;&#10;Return the lowest index in S where substring sub is found, &#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Raises ValueError when the substring is not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isalnum" func="yes">
                        <Overload retVal="" descr="Return True if the string is an alpha-numeric string, False otherwise.&#10;&#10;A string is alpha-numeric if all characters in the string are alpha-numeric and&#10;there is at least one character in the string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isalpha" func="yes">
                        <Overload retVal="" descr="Return True if the string is an alphabetic string, False otherwise.&#10;&#10;A string is alphabetic if all characters in the string are alphabetic and there&#10;is at least one character in the string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isascii" func="yes">
                        <Overload retVal="" descr="Return True if all characters in the string are ASCII, False otherwise.&#10;&#10;ASCII characters have code points in the range U+0000-U+007F.&#10;Empty string is ASCII too.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isdecimal" func="yes">
                        <Overload retVal="" descr="Return True if the string is a decimal string, False otherwise.&#10;&#10;A string is a decimal string if all characters in the string are decimal and&#10;there is at least one character in the string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isdigit" func="yes">
                        <Overload retVal="" descr="Return True if the string is a digit string, False otherwise.&#10;&#10;A string is a digit string if all characters in the string are digits and there&#10;is at least one character in the string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isidentifier" func="yes">
                        <Overload retVal="" descr='Return True if the string is a valid Python identifier, False otherwise.&#10;&#10;Use keyword.iskeyword() to test for reserved identifiers such as "def" and&#10;"class".'>
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.islower" func="yes">
                        <Overload retVal="" descr="Return True if the string is a lowercase string, False otherwise.&#10;&#10;A string is lowercase if all cased characters in the string are lowercase and&#10;there is at least one cased character in the string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isnumeric" func="yes">
                        <Overload retVal="" descr="Return True if the string is a numeric string, False otherwise.&#10;&#10;A string is numeric if all characters in the string are numeric and there is at&#10;least one character in the string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isprintable" func="yes">
                        <Overload retVal="" descr="Return True if the string is printable, False otherwise.&#10;&#10;A string is printable if all of its characters are considered printable in&#10;repr() or if it is empty.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isspace" func="yes">
                        <Overload retVal="" descr="Return True if the string is a whitespace string, False otherwise.&#10;&#10;A string is whitespace if all characters in the string are whitespace and there&#10;is at least one character in the string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.istitle" func="yes">
                        <Overload retVal="" descr="Return True if the string is a title-cased string, False otherwise.&#10;&#10;In a title-cased string, upper- and title-case characters may only&#10;follow uncased characters and lowercase characters only cased ones.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.isupper" func="yes">
                        <Overload retVal="" descr="Return True if the string is an uppercase string, False otherwise.&#10;&#10;A string is uppercase if all cased characters in the string are uppercase and&#10;there is at least one cased character in the string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.join" func="yes">
                        <Overload retVal="" descr="Concatenate any number of strings.&#10;&#10;The string whose method is called is inserted in between each given string.&#10;The result is returned as a new string.&#10;&#10;Example: '.'.join(['ab', 'pq', 'rs']) -&gt; 'ab.pq.rs'">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.ljust" func="yes">
                        <Overload retVal="" descr="Return a left-justified string of length width.&#10;&#10;Padding is done using the specified fill character (default is a space).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.lower" func="yes">
                        <Overload retVal="" descr="Return a copy of the string converted to lowercase.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.lstrip" func="yes">
                        <Overload retVal="" descr="Return a copy of the string with leading whitespace removed.&#10;&#10;If chars is given and not None, remove characters in chars instead.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.maketrans" func="yes">
                        <Overload retVal="" descr="Return a translation table usable for str.translate().&#10;&#10;If there is only one argument, it must be a dictionary mapping Unicode&#10;ordinals (integers) or characters to Unicode ordinals, strings or None.&#10;Character keys will be then converted to ordinals.&#10;If there are two arguments, they must be strings of equal length, and&#10;in the resulting dictionary, each character in x will be mapped to the&#10;character at the same position in y. If there is a third argument, it&#10;must be a string, whose characters will be mapped to None in the result.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.partition" func="yes">
                        <Overload retVal="" descr="Partition the string into three parts using the given separator.&#10;&#10;This will search for the separator in the string.  If the separator is found,&#10;returns a 3-tuple containing the part before the separator, the separator&#10;itself, and the part after it.&#10;&#10;If the separator is not found, returns a 3-tuple containing the original string&#10;and two empty strings.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.replace" func="yes">
                        <Overload retVal="" descr="Return a copy with all occurrences of substring old replaced by new.&#10;&#10;  count&#10;    Maximum number of occurrences to replace.&#10;    -1 (the default value) means replace all occurrences.&#10;&#10;If the optional argument count is given, only the first count occurrences are&#10;replaced.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.rfind" func="yes">
                        <Overload retVal="" descr="S.rfind(sub[, start[, end]]) -&gt; int&#10;&#10;Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Return -1 on failure.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.rindex" func="yes">
                        <Overload retVal="" descr="S.rindex(sub[, start[, end]]) -&gt; int&#10;&#10;Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end].  Optional&#10;arguments start and end are interpreted as in slice notation.&#10;&#10;Raises ValueError when the substring is not found.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.rjust" func="yes">
                        <Overload retVal="" descr="Return a right-justified string of length width.&#10;&#10;Padding is done using the specified fill character (default is a space).">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.rpartition" func="yes">
                        <Overload retVal="" descr="Partition the string into three parts using the given separator.&#10;&#10;This will search for the separator in the string, starting at the end. If&#10;the separator is found, returns a 3-tuple containing the part before the&#10;separator, the separator itself, and the part after it.&#10;&#10;If the separator is not found, returns a 3-tuple containing two empty strings&#10;and the original string.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.rsplit" func="yes">
                        <Overload retVal="" descr="Return a list of the words in the string, using sep as the delimiter string.&#10;&#10;  sep&#10;    The delimiter according which to split the string.&#10;    None (the default value) means split according to any whitespace,&#10;    and discard empty strings from the result.&#10;  maxsplit&#10;    Maximum number of splits to do.&#10;    -1 (the default value) means no limit.&#10;&#10;Splits are done starting at the end of the string and working to the front.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.rstrip" func="yes">
                        <Overload retVal="" descr="Return a copy of the string with trailing whitespace removed.&#10;&#10;If chars is given and not None, remove characters in chars instead.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.split" func="yes">
                        <Overload retVal="" descr="Return a list of the words in the string, using sep as the delimiter string.&#10;&#10;sep&#10;  The delimiter according which to split the string.&#10;  None (the default value) means split according to any whitespace,&#10;  and discard empty strings from the result.&#10;maxsplit&#10;  Maximum number of splits to do.&#10;  -1 (the default value) means no limit.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.splitlines" func="yes">
                        <Overload retVal="" descr="Return a list of the lines in the string, breaking at line boundaries.&#10;&#10;Line breaks are not included in the resulting list unless keepends is given and&#10;true.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.startswith" func="yes">
                        <Overload retVal="" descr="S.startswith(prefix[, start[, end]]) -&gt; bool&#10;&#10;Return True if S starts with the specified prefix, False otherwise.&#10;With optional start, test S beginning at that position.&#10;With optional end, stop comparing S at that position.&#10;prefix can also be a tuple of strings to try.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.strip" func="yes">
                        <Overload retVal="" descr="Return a copy of the string with leading and trailing whitespace remove.&#10;&#10;If chars is given and not None, remove characters in chars instead.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.swapcase" func="yes">
                        <Overload retVal="" descr="Convert uppercase characters to lowercase and lowercase characters to uppercase.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.title" func="yes">
                        <Overload retVal="" descr="Return a version of the string where each word is titlecased.&#10;&#10;More specifically, words start with uppercased characters and all remaining&#10;cased characters have lower case.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.translate" func="yes">
                        <Overload retVal="" descr="Replace each character in the string using the given translation table.&#10;&#10;  table&#10;    Translation table, which must be a mapping of Unicode ordinals to&#10;    Unicode ordinals, strings, or None.&#10;&#10;The table must implement lookup/indexing via __getitem__, for instance a&#10;dictionary or list.  If this operation raises LookupError, the character is&#10;left untouched.  Characters mapped to None are deleted.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.upper" func="yes">
                        <Overload retVal="" descr="Return a copy of the string converted to uppercase.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.str.zfill" func="yes">
                        <Overload retVal="" descr="Pad a numeric string with zeros on the left, to fill a field of the given width.&#10;&#10;The string is never truncated.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.sum" func="yes">
                        <Overload retVal="" descr="Return the sum of a 'start' value (default: 0) plus an iterable of numbers&#10;&#10;When the iterable is empty, return the start value.&#10;This function is intended specifically for use with numeric values and may&#10;reject non-numeric types.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.super" func="yes">
                        <Overload retVal="" descr="super() -&gt; same as super(__class__, &lt;first argument&gt;)&#10;super(type) -&gt; unbound super object&#10;super(type, obj) -&gt; bound super object; requires isinstance(obj, type)&#10;super(type, type2) -&gt; bound super object; requires issubclass(type2, type)&#10;Typical use to call a cooperative superclass method:&#10;class C(B):&#10;    def meth(self, arg):&#10;        super().meth(arg)&#10;This works for class methods too:&#10;class C(B):&#10;    @classmethod&#10;    def cmeth(cls, arg):&#10;        super().cmeth(arg)">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.tuple" func="yes">
                        <Overload retVal="" descr="Built-in immutable sequence.&#10;&#10;If no argument is given, the constructor returns an empty tuple.&#10;If iterable is specified the tuple is initialized from iterable's items.&#10;&#10;If the argument is a tuple, the return value is the same object.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.tuple.count" func="yes">
                        <Overload retVal="" descr="Return number of occurrences of value.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.tuple.index" func="yes">
                        <Overload retVal="" descr="Return first index of value.&#10;&#10;Raises ValueError if the value is not present.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.type" func="yes">
                        <Overload retVal="" descr="type(object_or_name, bases, dict)&#10;type(object) -&gt; the object's type&#10;type(name, bases, dict) -&gt; a new type">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.type.mro" func="yes">
                        <Overload retVal="" descr="Return a type's method resolution order.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.vars" func="yes">
                        <Overload retVal="" descr="vars([object]) -&gt; dictionary&#10;&#10;Without arguments, equivalent to locals().&#10;With an argument, equivalent to object.__dict__.">
                        </Overload>
                </KeyWord>
                <KeyWord name="builtins.zip" func="yes">
                        <Overload retVal="" descr="zip(iter1 [,iter2 [...]]) --&gt; zip object&#10;&#10;Return a zip object whose .__next__() method returns a tuple where&#10;the i-th element comes from the i-th iterable argument.  The .__next__()&#10;method continues until the shortest iterable in the argument sequence&#10;is exhausted and then it raises StopIteration.">
                        </Overload>
                </KeyWord>
                <KeyWord name="bytearray" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="bytes" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytes">
                        </Overload>
                </KeyWord>
                <KeyWord name="callable" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="capitalize" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="casefold" func="yes">
                        <Overload retVal="" descr="Function of builtins.str">
                        </Overload>
                </KeyWord>
                <KeyWord name="cast" func="yes">
                        <Overload retVal="" descr="Function of builtins.memoryview">
                        </Overload>
                </KeyWord>
                <KeyWord name="center" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="chr" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="class" />
                <KeyWord name="clear" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="compile" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="complex" func="yes">
                        <Overload retVal="" descr="Function of builtins.complex">
                        </Overload>
                </KeyWord>
                <KeyWord name="conjugate" func="yes">
                        <Overload retVal="" descr="Function of builtins.bool">
                        </Overload>
                </KeyWord>
                <KeyWord name="continue" />
                <KeyWord name="copy" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="count" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="decode" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="def" />
                <KeyWord name="del" />
                <KeyWord name="delattr" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="deleter" func="yes">
                        <Overload retVal="" descr="Function of builtins.property">
                        </Overload>
                </KeyWord>
                <KeyWord name="dict" func="yes">
                        <Overload retVal="" descr="Function of builtins.dict">
                        </Overload>
                </KeyWord>
                <KeyWord name="difference" func="yes">
                        <Overload retVal="" descr="Function of builtins.frozenset">
                        </Overload>
                </KeyWord>
                <KeyWord name="difference_update" func="yes">
                        <Overload retVal="" descr="Function of builtins.set">
                        </Overload>
                </KeyWord>
                <KeyWord name="dir" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="discard" func="yes">
                        <Overload retVal="" descr="Function of builtins.set">
                        </Overload>
                </KeyWord>
                <KeyWord name="divmod" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="elif" />
                <KeyWord name="else" />
                <KeyWord name="encode" func="yes">
                        <Overload retVal="" descr="Function of builtins.str">
                        </Overload>
                </KeyWord>
                <KeyWord name="endswith" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="eval" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="except" />
                <KeyWord name="exec" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="expandtabs" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="extend" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="finally" />
                <KeyWord name="find" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="float" func="yes">
                        <Overload retVal="" descr="Function of builtins.float">
                        </Overload>
                </KeyWord>
                <KeyWord name="for" />
                <KeyWord name="format" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="format_map" func="yes">
                        <Overload retVal="" descr="Function of builtins.str">
                        </Overload>
                </KeyWord>
                <KeyWord name="from" />
                <KeyWord name="from_bytes" func="yes">
                        <Overload retVal="" descr="Function of builtins.bool">
                        </Overload>
                </KeyWord>
                <KeyWord name="fromhex" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="fromkeys" func="yes">
                        <Overload retVal="" descr="Function of builtins.dict">
                        </Overload>
                </KeyWord>
                <KeyWord name="frozenset" func="yes">
                        <Overload retVal="" descr="Function of builtins.frozenset">
                        </Overload>
                </KeyWord>
                <KeyWord name="get" func="yes">
                        <Overload retVal="" descr="Function of builtins.dict">
                        </Overload>
                </KeyWord>
                <KeyWord name="getattr" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="getter" func="yes">
                        <Overload retVal="" descr="Function of builtins.property">
                        </Overload>
                </KeyWord>
                <KeyWord name="global" />
                <KeyWord name="globals" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="hasattr" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="hash" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="hex" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="id" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="if" />
                <KeyWord name="import" />
                <KeyWord name="in" />
                <KeyWord name="index" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="indices" func="yes">
                        <Overload retVal="" descr="Function of builtins.slice">
                        </Overload>
                </KeyWord>
                <KeyWord name="input" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="insert" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="int" func="yes">
                        <Overload retVal="" descr="Function of builtins.int">
                        </Overload>
                </KeyWord>
                <KeyWord name="intersection" func="yes">
                        <Overload retVal="" descr="Function of builtins.frozenset">
                        </Overload>
                </KeyWord>
                <KeyWord name="intersection_update" func="yes">
                        <Overload retVal="" descr="Function of builtins.set">
                        </Overload>
                </KeyWord>
                <KeyWord name="is" />
                <KeyWord name="is_integer" func="yes">
                        <Overload retVal="" descr="Function of builtins.float">
                        </Overload>
                </KeyWord>
                <KeyWord name="isalnum" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="isalpha" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="isascii" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="isdecimal" func="yes">
                        <Overload retVal="" descr="Function of builtins.str">
                        </Overload>
                </KeyWord>
                <KeyWord name="isdigit" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="isdisjoint" func="yes">
                        <Overload retVal="" descr="Function of builtins.frozenset">
                        </Overload>
                </KeyWord>
                <KeyWord name="isidentifier" func="yes">
                        <Overload retVal="" descr="Function of builtins.str">
                        </Overload>
                </KeyWord>
                <KeyWord name="isinstance" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="islower" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="isnumeric" func="yes">
                        <Overload retVal="" descr="Function of builtins.str">
                        </Overload>
                </KeyWord>
                <KeyWord name="isprintable" func="yes">
                        <Overload retVal="" descr="Function of builtins.str">
                        </Overload>
                </KeyWord>
                <KeyWord name="isspace" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="issubclass" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="issubset" func="yes">
                        <Overload retVal="" descr="Function of builtins.frozenset">
                        </Overload>
                </KeyWord>
                <KeyWord name="issuperset" func="yes">
                        <Overload retVal="" descr="Function of builtins.frozenset">
                        </Overload>
                </KeyWord>
                <KeyWord name="istitle" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="isupper" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="items" func="yes">
                        <Overload retVal="" descr="Function of builtins.dict">
                        </Overload>
                </KeyWord>
                <KeyWord name="iter" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="join" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="keys" func="yes">
                        <Overload retVal="" descr="Function of builtins.dict">
                        </Overload>
                </KeyWord>
                <KeyWord name="lambda" />
                <KeyWord name="len" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="list" func="yes">
                        <Overload retVal="" descr="Function of builtins.list">
                        </Overload>
                </KeyWord>
                <KeyWord name="ljust" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="locals" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="lower" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="lstrip" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="maketrans" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="max" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="memoryview" func="yes">
                        <Overload retVal="" descr="Function of builtins.memoryview">
                        </Overload>
                </KeyWord>
                <KeyWord name="min" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="mro" func="yes">
                        <Overload retVal="" descr="Function of builtins.type">
                        </Overload>
                </KeyWord>
                <KeyWord name="next" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="nonlocal" />
                <KeyWord name="not" />
                <KeyWord name="oct" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="open" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="or" />
                <KeyWord name="ord" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="partition" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="pass" />
                <KeyWord name="pop" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="popitem" func="yes">
                        <Overload retVal="" descr="Function of builtins.dict">
                        </Overload>
                </KeyWord>
                <KeyWord name="pow" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="print" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="property" func="yes">
                        <Overload retVal="" descr="Function of builtins.property">
                        </Overload>
                </KeyWord>
                <KeyWord name="raise" />
                <KeyWord name="range" func="yes">
                        <Overload retVal="" descr="Function of builtins.range">
                        </Overload>
                </KeyWord>
                <KeyWord name="release" func="yes">
                        <Overload retVal="" descr="Function of builtins.memoryview">
                        </Overload>
                </KeyWord>
                <KeyWord name="remove" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="replace" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="repr" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="return" />
                <KeyWord name="reverse" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="rfind" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="rindex" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="rjust" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="round" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="rpartition" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="rsplit" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="rstrip" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="set" func="yes">
                        <Overload retVal="" descr="Function of builtins.set">
                        </Overload>
                </KeyWord>
                <KeyWord name="setattr" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="setdefault" func="yes">
                        <Overload retVal="" descr="Function of builtins.dict">
                        </Overload>
                </KeyWord>
                <KeyWord name="setter" func="yes">
                        <Overload retVal="" descr="Function of builtins.property">
                        </Overload>
                </KeyWord>
                <KeyWord name="slice" func="yes">
                        <Overload retVal="" descr="Function of builtins.slice">
                        </Overload>
                </KeyWord>
                <KeyWord name="sort" func="yes">
                        <Overload retVal="" descr="Function of builtins.list">
                        </Overload>
                </KeyWord>
                <KeyWord name="sorted" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="split" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="splitlines" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="startswith" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="str" func="yes">
                        <Overload retVal="" descr="Function of builtins.str">
                        </Overload>
                </KeyWord>
                <KeyWord name="strip" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="sum" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="swapcase" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="symmetric_difference" func="yes">
                        <Overload retVal="" descr="Function of builtins.frozenset">
                        </Overload>
                </KeyWord>
                <KeyWord name="symmetric_difference_update" func="yes">
                        <Overload retVal="" descr="Function of builtins.set">
                        </Overload>
                </KeyWord>
                <KeyWord name="title" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="to_bytes" func="yes">
                        <Overload retVal="" descr="Function of builtins.bool">
                        </Overload>
                </KeyWord>
                <KeyWord name="tobytes" func="yes">
                        <Overload retVal="" descr="Function of builtins.memoryview">
                        </Overload>
                </KeyWord>
                <KeyWord name="tolist" func="yes">
                        <Overload retVal="" descr="Function of builtins.memoryview">
                        </Overload>
                </KeyWord>
                <KeyWord name="translate" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="try" />
                <KeyWord name="tuple" func="yes">
                        <Overload retVal="" descr="Function of builtins.tuple">
                        </Overload>
                </KeyWord>
                <KeyWord name="type" func="yes">
                        <Overload retVal="" descr="Function of builtins.type">
                        </Overload>
                </KeyWord>
                <KeyWord name="union" func="yes">
                        <Overload retVal="" descr="Function of builtins.frozenset">
                        </Overload>
                </KeyWord>
                <KeyWord name="update" func="yes">
                        <Overload retVal="" descr="Function of builtins.dict">
                        </Overload>
                </KeyWord>
                <KeyWord name="upper" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
                <KeyWord name="values" func="yes">
                        <Overload retVal="" descr="Function of builtins.dict">
                        </Overload>
                </KeyWord>
                <KeyWord name="vars" func="yes">
                        <Overload retVal="" descr="Function of builtins">
                        </Overload>
                </KeyWord>
                <KeyWord name="while" />
                <KeyWord name="with" />
                <KeyWord name="with_traceback" func="yes">
                        <Overload retVal="" descr="Function of builtins.ArithmeticError">
                        </Overload>
                </KeyWord>
                <KeyWord name="yield" />
                <KeyWord name="zfill" func="yes">
                        <Overload retVal="" descr="Function of builtins.bytearray">
                        </Overload>
                </KeyWord>
        </AutoComplete>
</NotepadPlus>